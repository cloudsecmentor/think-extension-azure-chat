name: CI-CD Azure Web App Containers

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  AZURE_REGION: ${{ vars.AZURE_REGION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: ACR login
        run: az acr login --name ${{ vars.ACR_NAME }}

      - name: Build and push API image
        run: |
          docker build -t ${{ vars.ACR_NAME }}.azurecr.io/api:latest ./api
          docker push ${{ vars.ACR_NAME }}.azurecr.io/api:latest

      - name: Build and push Agent image
        run: |
          docker build -t ${{ vars.ACR_NAME }}.azurecr.io/agent:latest ./agent
          docker push ${{ vars.ACR_NAME }}.azurecr.io/agent:latest

      - name: Build and push MCP image
        run: |
          docker build -t ${{ vars.ACR_NAME }}.azurecr.io/mcp:latest ./mcp
          docker push ${{ vars.ACR_NAME }}.azurecr.io/mcp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Managed identity and ACR permissions are verified in infra workflow

      - name: Render compose file with ACR name
        run: echo "Skip rendering compose; using Sidecar configuration"

      - name: Configure Web App Sidecar containers
        run: |
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          APP_ID=$(az webapp show --resource-group $AZURE_RESOURCE_GROUP --name ${{ vars.WEBAPP_NAME }} --query id -o tsv)
          API_VER=2023-12-01
          REGISTRY=${{ vars.ACR_NAME }}.azurecr.io

          # sidecar agent
          az rest --method PUT \
            --url https://management.azure.com${APP_ID}/sitecontainers/agent?api-version=${API_VER} \
            --body @- <<'JSON'
          {
            "name": "agent",
            "properties": {
              "image": "${{ vars.ACR_NAME }}.azurecr.io/agent:latest",
              "isMain": false,
              "targetPort": 5500,
              "inheritAppSettingsAndConnectionStrings": true,
              "authType": "SystemIdentity"
            }
          }
          JSON

          # sidecar mcp
          az rest --method PUT \
            --url https://management.azure.com${APP_ID}/sitecontainers/mcp?api-version=${API_VER} \
            --body @- <<'JSON'
          {
            "name": "mcp",
            "properties": {
              "image": "${{ vars.ACR_NAME }}.azurecr.io/mcp:latest",
              "isMain": false,
              "targetPort": 8801,
              "inheritAppSettingsAndConnectionStrings": true,
              "authType": "SystemIdentity"
            }
          }
          JSON


          # API main container
          az rest --method PUT \
            --url https://management.azure.com${APP_ID}/sitecontainers/api?api-version=${API_VER} \
            --body @- <<'JSON'
          {
            "name": "api",
            "properties": {
              "image": "${{ vars.ACR_NAME }}.azurecr.io/api:latest",
              "isMain": true,
              "targetPort": 5000,
              "authType": "SystemIdentity"
            }
          }
          JSON

          # Switch site to Sidecar mode
          az webapp config set --resource-group $AZURE_RESOURCE_GROUP --name ${{ vars.WEBAPP_NAME }} --linux-fx-version "sitecontainers"

      - name: Restart Web App
        run: |
          az webapp restart --resource-group $AZURE_RESOURCE_GROUP --name ${{ vars.WEBAPP_NAME }}


